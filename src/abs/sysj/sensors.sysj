Sensors(
	input signal conveyorPlantOn, rotaryTurntablePlantOn;
	output signal capOnBottleAtPos1, bottleAtPoint, bottleAtPos1Conveyor, bottleAtPos1FRU, bottleAtPos2, bottleAtPos3, bottleAtPos4, bottleAtPos5, bottleLeftPos5, turntableAlignedWithSensor, overflowSensed;
	output signal bottleAtPointV, bottleLeftPos5V, bottleAtPos0V, bottleAtPos1V, bottleAtPos2V, bottleAtPos3V, bottleAtPos4V, bottleAtPos5V, capBottleCompleteV, capBottleIncompleteV, loadLidCompleteV, loadLidIncompleteV, fillBottleCompleteV, fillBottleIncompleteV;

	input Integer channel rotateStepCompleteToSensors, logQuantityLiquidFilled, capBottleCompleteSensors, loadLidCompleteSensors, fillBottleCompleteSensors, placeBottleCompleteSensors, removeBottleCompleteSensors;
   	)
->
{
	// --------------- Private Signal ---------------
	boolean signal bottleAtPos0Reg;
	boolean signal bottleAtPos1Reg;
	boolean signal bottleAtPos2Reg;
	boolean signal bottleAtPos3Reg;
	boolean signal bottleAtPos4Reg;
	boolean signal bottleAtPos5Reg;
	boolean signal bottleLeftPos5Reg;
	int signal totalFluidInCurrentBottle;
	int signal capBottleCompleteMemory;
	int signal loadLidCompleteMemory;
	int signal fillBottleCompleteMemory;
	// ----------------------------------------------

	emit bottleAtPos0Reg(false);
	emit bottleAtPos1Reg(false);
	emit bottleAtPos2Reg(false);
	emit bottleAtPos3Reg(false);
	emit bottleAtPos4Reg(false);
	emit bottleAtPos5Reg(false);
	emit bottleLeftPos5Reg(false);
	emit totalFluidInCurrentBottle(0);
	emit capBottleCompleteMemory(0);
	emit loadLidCompleteMemory(0);
	emit fillBottleCompleteMemory(0);

	// ---------------- bottleAtPos1 ----------------
	{
		while(true)
		{
			await(conveyorPlantOn);
			if((Boolean)#bottleAtPos0Reg == true)
			{
				emit bottleAtPos1Reg(true);
				emit bottleAtPos0Reg(false);
				if((Boolean)#bottleAtPos5Reg == true)
				{
					emit bottleLeftPos5Reg(true);
				}
				emit bottleAtPos5Reg(false);
			}
		}
	}
	// ----------------------------------------------
	||
	// ------------ placeBottle Complete ------------
	{
		while(true)
		{
			receive placeBottleCompleteSensors;
			emit bottleAtPos0Reg(true);
			pause;
		}
	}
	// ----------------------------------------------
	||
	// ------------ removeBottleComplete ------------
	{
		while(true)
		{
			receive removeBottleCompleteSensors;
			emit bottleLeftPos5Reg(false);
			pause;
		}
	}
	// ----------------------------------------------
	||
	// ----------- tableAlignedWithSensor -----------
	{
		while(true)
		{

			
			await(rotaryTurntablePlantOn);
			if ( true )
			{
				abort(!rotaryTurntablePlantOn)
				{
					sustain turntableAlignedWithSensor;
				}
			}
		}
	}
	// ----------------------------------------------
	||
	// ----------- Local Bottle Pos Shift -----------
	{
		while(true)
		{
			receive rotateStepCompleteToSensors;
			emit bottleAtPos5Reg((Boolean)#bottleAtPos4Reg);
			emit bottleAtPos4Reg((Boolean)#bottleAtPos3Reg);
			emit bottleAtPos3Reg((Boolean)#bottleAtPos2Reg);
			emit bottleAtPos2Reg((Boolean)#bottleAtPos1Reg);
			emit bottleAtPos1Reg(false);
			System.out.println("Turn");

			emit capBottleCompleteMemory(0);
			emit loadLidCompleteMemory(0);
			emit fillBottleCompleteMemory(0);

			System.out.println("[DEBUG] pos5:" + (Boolean)#bottleAtPos5Reg + " pos4:" + (Boolean)#bottleAtPos4Reg + " pos3:" + (Boolean)#bottleAtPos3Reg + " pos2:" + (Boolean)#bottleAtPos2Reg + " pos1:" + (Boolean)#bottleAtPos1Reg);

			pause;
		}	
	}
	// ----------------------------------------------
	||
	// ----------- Liquid Filler Overflow -----------
	{
		int totalFluidInBottle = 0;
		while(true)
		{	
			receive logQuantityLiquidFilled;
			
			if((Integer)#logQuantityLiquidFilled == -1)
			{
				totalFluidInBottle = 0;
			}
			else
			{
				System.out.println("[DEBUG] Bottle in position 2 filled with " + (Integer)#logQuantityLiquidFilled + "ml.");
				totalFluidInBottle += (Integer)#logQuantityLiquidFilled;
			}
			emit totalFluidInCurrentBottle(totalFluidInBottle);
			pause;
		}	
	}
	// ----------------------------------------------
	||
	// ------------- Overflow Broadcast -------------
	{
		{while(true){if((Integer)#totalFluidInCurrentBottle > 200){emit overflowSensed; System.out.println("Error");} pause;}}
	}
	// ----------------------------------------------
	||
	// ---------- Machine Complete Signals ----------
	{
		{
			while(true)
			{
				receive capBottleCompleteSensors;
				emit capBottleCompleteMemory(1);
				pause;
			}
		}
		||
		{
			while(true)
			{
				receive loadLidCompleteSensors;
				emit loadLidCompleteMemory(1);
				pause;
			}
		}
		||
		{
			while(true)
			{
				receive fillBottleCompleteSensors;
				emit fillBottleCompleteMemory(1);
				pause;
			}
		}
	}
	// ----------------------------------------------
	||
	// --------- Broadcast Complete Signals ---------
	{
		{while(true){if((Integer)#capBottleCompleteMemory == 1){emit capBottleCompleteV; } else {emit capBottleIncompleteV; } pause;}}
		||
		{while(true){if((Integer)#loadLidCompleteMemory == 1){emit loadLidCompleteV; } else {emit loadLidIncompleteV; } pause;}}
		||
		{while(true){if((Integer)#fillBottleCompleteMemory == 1){emit fillBottleCompleteV; } else {emit fillBottleIncompleteV; } pause;}}
		
	}
	// ----------------------------------------------
	||
	// ----------- Bottle Position Memory -----------
	{
		{while(true){emit bottleAtPoint; emit bottleAtPointV; pause;}}
		||
		{while(true){if((Boolean)#bottleAtPos0Reg){emit bottleAtPos0V;} pause;}}
		||
		{while(true){if((Boolean)#bottleAtPos1Reg){emit bottleAtPos1Conveyor; emit bottleAtPos1FRU; emit bottleAtPos1V;} pause;}}
		||
		{while(true){if((Boolean)#bottleAtPos2Reg){emit bottleAtPos2; emit bottleAtPos2V;} pause;}}
		||
		{while(true){if((Boolean)#bottleAtPos3Reg){emit bottleAtPos3; emit bottleAtPos3V;} pause;}}
		||
		{while(true){if((Boolean)#bottleAtPos4Reg){emit bottleAtPos4; emit bottleAtPos4V;} pause;}}
		||
		{while(true){if((Boolean)#bottleAtPos5Reg){emit bottleAtPos5; emit bottleAtPos5V;} pause;}}
		||
		{while(true){if((Boolean)#bottleLeftPos5Reg){emit bottleLeftPos5; emit bottleLeftPos5V;} pause;}}
	}
	// ----------------------------------------------
}