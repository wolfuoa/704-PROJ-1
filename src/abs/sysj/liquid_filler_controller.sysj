import util.Order;

LiquidFillerController(
    input signal bottleAtPos2, dosUnitEvac;
    input Integer signal liquidLoaded, dosUnitFilled;
    output signal valveInletOn, valveInjectorOn, dosUnitValveExtend;
    output Integer signal loadLiquid, dosUnitValveRetract;

    input Order channel fillBottle;
    output Integer channel fillBottleComplete;
    )
->
{

	Order order;
	int signal current_liquid;
	
    // TODO: Send channel data to sensors - When a bottle is filled with a portion of liquid sum it to keep track
    // Send a clearing signal to the sensors when the bottle is completely filled

    while(true)
    {
    	pause;
        receive fillBottle;
        System.out.println("Test");
        // present(bottleAtPos2){}

        order = (Order)#fillBottle;
        System.out.println("Test 1");

        for(int liquid_num = 0; liquid_num < 4; liquid_num++)
        {
       		System.out.println("Test loop");
        	emit current_liquid(order.getFluid(liquid_num));
        	
            trap(E)
            {
                abort(liquidLoaded)
                {
                    sustain loadLiquid(liquid_num);
                }
                
                if((Integer)#liquidLoaded != liquid_num)
                {
                    exit(E);
                }
            }
            do
            {
                // Error
            }
            
            System.out.println("Test 3");

            trap(E)
            {
                abort(dosUnitFilled)
                {
                    {sustain dosUnitValveRetract((Integer)#current_liquid);}
                    ||
                    {sustain valveInjectorOn;}
                }
                
                System.out.println("Test break");
                
                if((Integer)#dosUnitFilled != (Integer)#current_liquid)
                {
                    exit(E);
                }
            }
            do
            {
                // Error
            }
            
            System.out.println("Test 4");

            abort(dosUnitEvac)
            {
                {sustain valveInletOn;}
                ||
                {sustain dosUnitValveExtend;}
            }
            
            System.out.println("Test 5");
        }
        send fillBottleComplete(0);
	}
}