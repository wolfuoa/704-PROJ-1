import util.Constants;

BaxterLeftArmController(
	input signal bottleAtPoint, commandFeedbackLeft, enableBaxterLeft;
	output String signal commandLeft;
	
	input Integer channel baxterLeftArmCommand;
	output Integer channel baxterLeftArmCommandComplete, placeBottleCompleteSensors;
   	)
->
{
	while(true)
	{
		receive baxterLeftArmCommand;

        switch((Integer)#baxterLeftArmCommand)
        {
        // --------------- PLACE BOTTLE ON CONVEYOR ---------------
        case 0: // COMMAND_PLACE_BOTTLE
        	present(bottleAtPoint)
            {
                await(enableBaxterLeft);
                abort(commandFeedbackLeft)
                {
                    sustain commandLeft("move_arm left ABOVE_COLLECTION_POINT");
                }
                await(!enableBaxterLeft);
                
                abort(commandFeedbackLeft)
                {
                    sustain commandLeft("move_arm left ON_COLLECTION_POINT");
                }
                
                await(enableBaxterLeft);
                abort(commandFeedbackLeft)
                {
                    sustain commandLeft("grip left CLOSED");
                }
                await(!enableBaxterLeft);
                
                abort(commandFeedbackLeft)
                {
                    sustain commandLeft("move_arm left ABOVE_COLLECTION_POINT");
                }
                
                await(enableBaxterLeft);
                abort(commandFeedbackLeft)
                {
                    sustain commandLeft("move_arm left ABOVE_CONVEYOR_START");
                }
                await(!enableBaxterLeft);
                
                abort(commandFeedbackLeft)
                {
                    sustain commandLeft("move_arm left ON_CONVEYOR_START");
                }
                
                await(enableBaxterLeft);
                abort(commandFeedbackLeft)
                {
                    sustain commandLeft("grip left OPEN");
                }
                await(!enableBaxterLeft);
                
                abort(commandFeedbackLeft)
                {
                    sustain commandLeft("move_arm left ABOVE_CONVEYOR_START");
                }
                
                await(enableBaxterLeft);
                abort(commandFeedbackLeft)
                {
                    sustain commandLeft("move_arm left IDLE");
                }
                await(!enableBaxterLeft);

                send baxterLeftArmCommandComplete(0);
                send placeBottleCompleteSensors(0);
                System.out.println("[DEBUG] moved bottle from point to conveyor (baxter left arm)");
            }
            else
            {
                send baxterLeftArmCommandComplete(2);
                System.out.println("\u001B[31m" + "[DEBUG] no bottle at point (baxter left arm)" + "\u001B[0m");
            }
            break;
		// --------------------------------------------------------
		
		// ---------------- LOAD LID FAULT COMMAND ----------------
        case 2: // COMMAND LOAD LID

            await(enableBaxterLeft);
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_LID_SURPLUS");
            }

            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ON_LID_SURPLUS");
            }

            await(enableBaxterLeft);
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("grip left CLOSED");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_LID_SURPLUS");
            }
            
            await(enableBaxterLeft);
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_POSITION_THREE");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ON_POSITION_THREE");
            }

            await(enableBaxterLeft);
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("grip left OPEN");
            }

            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_POSITION_THREE");
            }

            await(enableBaxterLeft);
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left IDLE");
            }

            send baxterLeftArmCommandComplete(0);
            
            break;
        // --------------------------------------------------------
        
        // ------------- INVALID COMMAND FOR LEFT ARM -------------
        default:
            break;
        // --------------------------------------------------------
        }

		pause;
	}
}