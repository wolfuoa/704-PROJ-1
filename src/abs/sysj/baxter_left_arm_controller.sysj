#import util.Constants;

BaxterLeftArmController(
	input signal bottleAtPoint, commandFeedback;
	output String signal command;
	
	input Integer channel baxterCommand;
	output Integer channel baxterCommandComplete;
   	)
->
{
	while(true)
	{
		receive baxterCommand;

        switch((Integer)#baxterCommand)
        {
        // --------------- PLACE BOTTLE ON CONVEYOR ---------------
        case COMMAND_PLACE_BOTTLE:
        	// present(bottleAtPoint){}
            abort(commandFeedback)
            {
                sustain command("move_arm left ABOVE_COLLECTION_POINT");
            }
            
            abort(commandFeedback)
            {
                sustain command("move_arm left ON_COLLECTION_POINT");
            }
            
            abort(commandFeedback)
            {
                sustain command("grip left CLOSED");
            }
            
            abort(commandFeedback)
            {
                sustain command("move_arm left ABOVE_COLLECTION_POINT");
            }
            
            abort(commandFeedback)
            {
                sustain command("move_arm left ABOVE_CONVEYOR_START");
            }
            
            abort(commandFeedback)
            {
                sustain command("move_arm left ON_CONVEYOR_START");
            }
            
            abort(commandFeedback)
            {
                sustain command("grip left OPEN");
            }
            
            abort(commandFeedback)
            {
                sustain command("move_arm left ABOVE_CONVEYOR_START");
            }
            
            abort(commandFeedback)
            {
                sustain command("move_arm left IDLE");
            }
            break;
		// --------------------------------------------------------
		
		// ---------------- LOAD LID FAULT COMMAND ----------------
        case COMMAND_LOAD_LID:
            abort(commandFeedback)
            {
                sustain command("move_arm left ABOVE_LID_SURPLUS");
            }

            abort(commandFeedback)
            {
                sustain command("move_arm left ON_LID_SURPLUS");
            }

            abort(commandFeedback)
            {
                sustain command("grip left CLOSED");
            }
            
            abort(commandFeedback)
            {
                sustain command("move_arm left ABOVE_LID_SURPLUS");
            }
            
            abort(commandFeedback)
            {
                sustain command("move_arm left ABOVE_POSITION_THREE");
            }
            
            abort(commandFeedback)
            {
                sustain command("move_arm left ON_POSITION_THREE");
            }
            
            abort(commandFeedback)
            {
                sustain command("grip left OPEN");
            }

            abort(commandFeedback)
            {
                sustain command("move_arm left ABOVE_POSITION_THREE");
            }

            abort(commandFeedback)
            {
                sustain command("move_arm left IDLE");
            }
            
            break;
        // --------------------------------------------------------
        
        // ------------- INVALID COMMAND FOR LEFT ARM -------------
        default:
            break;
        // --------------------------------------------------------
        }
		
		send baxterCommandComplete(0);
	}
}