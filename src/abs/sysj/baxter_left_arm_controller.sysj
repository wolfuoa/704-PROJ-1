#import util.Constants;

BaxterLeftArmController(
	input signal bottleAtPoint, commandFeedbackLeft;
	output String signal commandLeft;
	
	input Integer channel baxterLeftArmCommand;
	output Integer channel baxterLeftArmCommandComplete;
   	)
->
{
	while(true)
	{
		receive baxterLeftArmCommand;

        switch((Integer)#baxterLeftArmCommand)
        {
        // --------------- PLACE BOTTLE ON CONVEYOR ---------------
        case COMMAND_PLACE_BOTTLE:
        	// present(bottleAtPoint){}
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_COLLECTION_POINT");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ON_COLLECTION_POINT");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("grip left CLOSED");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_COLLECTION_POINT");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_CONVEYOR_START");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ON_CONVEYOR_START");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("grip left OPEN");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_CONVEYOR_START");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left IDLE");
            }
            break;
		// --------------------------------------------------------
		
		// ---------------- LOAD LID FAULT COMMAND ----------------
        case COMMAND_LOAD_LID:
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_LID_SURPLUS");
            }

            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ON_LID_SURPLUS");
            }

            abort(commandFeedbackLeft)
            {
                sustain commandLeft("grip left CLOSED");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_LID_SURPLUS");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_POSITION_THREE");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ON_POSITION_THREE");
            }
            
            abort(commandFeedbackLeft)
            {
                sustain commandLeft("grip left OPEN");
            }

            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left ABOVE_POSITION_THREE");
            }

            abort(commandFeedbackLeft)
            {
                sustain commandLeft("move_arm left IDLE");
            }
            
            break;
        // --------------------------------------------------------
        
        // ------------- INVALID COMMAND FOR LEFT ARM -------------
        default:
            break;
        // --------------------------------------------------------
        }
		
		send baxterLeftArmCommandComplete(0);
	}
}