import util.Constants;

FRU(
    input Integer channel placeBottle, removeBottle, loadLidFaultTolerant, rotateStepFaultTolerant;
    output Integer channel placeBottleComplete, removeBottleComplete, loadLidCompleteFaultTolerant, rotateStepCompleteFaultTolerant;

    output Integer channel loadLid, rotateStep, baxterLeftArmCommand, baxterRightArmCommand;
    input Integer channel loadLidComplete, rotateStepComplete, baxterLeftArmCommandComplete, baxterRightArmCommandComplete;

    input signal bottleAtPos1FRU, bottleAtPos3;
    output Integer channel rotateStepCompleteToSensors;
   	)
->
{
    // ------- Local Signal Declarations -------
    int signal localReceiverLeft;
    int signal localTransmitterLeft;
    int signal localReceiverRight;
    int signal localTransmitterRight;
    // -----------------------------------------

	// -------------- Load Bottle --------------
	{
		while(true)
		{
			receive placeBottle;
            emit localTransmitterLeft(0); // COMMAND_PLACE_BOTTLE
            await(localReceiverLeft);
            if((Integer)#localReceiverLeft == 0)
            {
                send placeBottleComplete(0);
            }
            else
            {
                send placeBottleComplete(2);
            }
            pause;
		}
	}
    // -----------------------------------------
    ||
	// ------------- Remove Bottle -------------
	{
		while(true)
        {
            receive removeBottle;
            emit localTransmitterRight(1); // COMMAND_REMOVE_BOTTLE
            await(localReceiverRight);
            if((Integer)#localReceiverRight == 0)
            {
                send removeBottleComplete(0);
            }
            else
            {
                send removeBottleComplete(2);
            }
            pause;
        }
	}
	// -----------------------------------------
    ||
	// ------- Load Lid [FAULT TOLERANT] -------
	{
		while(true)
        {
            receive loadLidFaultTolerant;
            present(bottleAtPos3)
            {
                send loadLid(0);
            receive loadLidComplete;
            if((Integer)#loadLidComplete == 1)
            {
                emit localTransmitterLeft(2); // COMMAND_LOAD_LID
                await(localReceiverLeft);
            }
            send loadLidCompleteFaultTolerant(0);
            }
            else
            {
                System.out.println("\u001B[31m" + "[DEBUG] no bottle at pos 3  (FRU -> Lid Loader)" + "\u001B[0m");
                send loadLidCompleteFaultTolerant(2);
            }
            pause;
        }
	}
	// -----------------------------------------
    ||
	// --- Rotate Turntable [FAULT TOLERANT] ---
	{
		while(true)
        {
            receive rotateStepFaultTolerant;
            present(bottleAtPos1FRU)
            {
                send rotateStep(0);
                receive rotateStepComplete;
                if((Integer)#rotateStepComplete == 1)
                {
                    emit localTransmitterRight(3); // COMMAND_ROTATE_TURNTABLE
                    await(localReceiverRight);
                }
                send rotateStepCompleteFaultTolerant(0);
                send rotateStepCompleteToSensors(0);
            }
            else 
            {
                System.out.println("\u001B[31m" + "[DEBUG] no bottle at pos 1  (FRU -> Rotary Turntable)" + "\u001B[0m");
                send rotateStepCompleteFaultTolerant(2);
            }
            pause;
        }
	}
	// -----------------------------------------
    ||
    // ------- Consolidate Input Signals -------
    {
        {
            while(true)
            {
                receive baxterLeftArmCommandComplete;
                emit localReceiverLeft((Integer)#baxterLeftArmCommandComplete);
                pause;
            }
        }
        ||
        {
            while(true)
            {
                receive baxterRightArmCommandComplete;
                emit localReceiverRight((Integer)#baxterRightArmCommandComplete);
                pause;
            }
        }

    }
    // ----------------------------------------
    ||
    // ------ Consolidate Output Signals ------
    {
        {
            while(true)
            {
                await(localTransmitterLeft);
                send baxterLeftArmCommand((Integer)#localTransmitterLeft);
                pause;
            }
        }
        ||
        {
            while(true)
            {
                await(localTransmitterRight);
                send baxterRightArmCommand((Integer)#localTransmitterRight);
                pause;
            }
        }
    }
    // ----------------------------------------
}