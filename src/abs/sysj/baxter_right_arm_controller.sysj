import util.Constants;

BaxterRightArmController(
	input signal bottleLeftPos5, commandFeedbackRight, enableBaxterRight;
	output String signal commandRight;
	
	input Integer channel baxterRightArmCommand;
	output Integer channel baxterRightArmCommandComplete, removeBottleCompleteSensors;
   	)
->
{
	while(true)
	{
		receive baxterRightArmCommand;
        // present(bottleAtPos5){}

        switch((Integer)#baxterRightArmCommand)
        {
        // ---------------- REMOVE BOTTLE FROM END ----------------
        case 1: // COMMAND_REMOVE_BOTTLE
            present(bottleLeftPos5)
            {
                await(enableBaxterRight);
                abort(commandFeedbackRight)
                {
                    sustain commandRight("move_arm right ABOVE_REMOVAL_POINT");
                }
                await(!enableBaxterRight);

                abort(commandFeedbackRight)
                {
                    sustain commandRight("move_arm right ON_REMOVAL_POINT");
                }

                await(enableBaxterRight);
                abort(commandFeedbackRight)
                {
                    sustain commandRight("grip right CLOSED");
                }
                await(!enableBaxterRight);

                abort(commandFeedbackRight)
                {
                    sustain commandRight("move_arm right ABOVE_REMOVAL_POINT");
                }

                await(enableBaxterRight);
                abort(commandFeedbackRight)
                {
                    sustain commandRight("move_arm right ABOVE_PACKAGE");
                }
                await(!enableBaxterRight);

                abort(commandFeedbackRight)
                {
                    sustain commandRight("move_arm right ON_PACKAGE");
                }

                await(enableBaxterRight);
                abort(commandFeedbackRight)
                {
                    sustain commandRight("grip right OPEN");
                }
                await(!enableBaxterRight);

                abort(commandFeedbackRight)
                {
                    sustain commandRight("move_arm right ABOVE_PACKAGE");
                }

                await(enableBaxterRight);
                abort(commandFeedbackRight)
                {
                    sustain commandRight("move_arm right IDLE");
                }
                await(!enableBaxterRight);

                send baxterRightArmCommandComplete(0);
                send removeBottleCompleteSensors(0);
                System.out.println("[DEBUG] moved bottle from end of conveyor to package (baxter right arm)");
            }
            else
            {
                send baxterRightArmCommandComplete(2);
                System.out.println("\u001B[31m" + "[DEBUG] no bottle at end of conveyor (baxter right arm)" + "\u001B[0m");
            }
            break;
		// --------------------------------------------------------
        
        // ------------ ROTATE TURNTABLE FAULT COMMAND ------------
        case 3: // COMMAND_ROTATE_TURNTABLE
        
            await(enableBaxterRight);
            abort(commandFeedbackRight)
            {
                sustain commandRight("move_arm right ABOVE_ROTARY_TURNTABLE");
            }

            abort(commandFeedbackRight)
            {
                sustain commandRight("move_arm right ON_ROTARY_TURNTABLE");
            }

            await(enableBaxterRight);
            abort(commandFeedbackRight)
            {
                sustain commandRight("grip right CLOSED");
            }

            await(enableBaxterRight);
            abort(commandFeedbackRight)
            {
                sustain commandRight("rotate_hand right clockwise 60");
            }

            await(enableBaxterRight);
            abort(commandFeedbackRight)
            {
                sustain commandRight("grip right OPEN");
            }

            abort(commandFeedbackRight)
            {
                sustain commandRight("move_arm right ABOVE_ROTARY_TURNTABLE");
            }

            await(enableBaxterRight);
            abort(commandFeedbackRight)
            {
                sustain commandRight("move_arm right IDLE");
            }

            send baxterRightArmCommandComplete(0);

            break;
        // --------------------------------------------------------
        
        // ------------- INVALID COMMAND FOR RIGHT ARM -------------
        default:
            break;
        // --------------------------------------------------------
        }
		
		pause;
	}
}