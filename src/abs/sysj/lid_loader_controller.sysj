LidLoaderController(
		input signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty,request,bottleAtPos3, enableLidLoader;
		output signal pusherExtend,vacOn,armSource,armDest;

		input Integer channel loadLid;
		output Integer channel loadLidComplete, loadLidCompleteSensors;
		)
->{

	while(true)
	{
		pause;
		receive loadLid;
		present(bottleAtPos3)
        {

			abort(!empty)
			{
				halt;
			}

			await(enableLidLoader);
			abort(armAtDest)
			{
				sustain armDest;
			}
			System.out.println("[DEBUG] arm at destination");
			await(!enableLidLoader);

			await(enableLidLoader);
			abort(pusherExtended)
			{
				sustain pusherExtend;
			}
			System.out.println("[DEBUG] pusher extended");
			await(!enableLidLoader);

			//// --------MODIFIED-----
			//abort(!enableLidLoader)
			//{
			//	sustain pusherExtend;
			//}
			//trap(E)
			//{
			//	{sustain pusherExtend;}
			//	||
			//	{await(!enableLidLoader); exit(E);}
			//}
			//do
			//{
			//}
			//// --------------
			
			await(enableLidLoader);
			abort(pusherRetracted)
			{
				halt;
			}
			System.out.println("[DEBUG] pusher retracted");
			await(!enableLidLoader);
			
			await(enableLidLoader);
			abort(armAtSource)
			{
				sustain armSource;
			}
			System.out.println("[DEBUG] arm at source");
			await(!enableLidLoader);
			
			await(enableLidLoader);
			abort(WPgripped)
			{
				sustain vacOn;
			}
			System.out.println("[DEBUG] workpeice gripped");
			await(!enableLidLoader);
			
			await(enableLidLoader);
			abort(armAtDest)
			{
				emit armDest;
				emit vacOn;
				pause;
			}
			System.out.println("[DEBUG] arm at destination");
			await(!enableLidLoader);

			send loadLidComplete(0);
			send loadLidCompleteSensors(0);
		}
		else
		{
			// bottle at pos 3 not detected
			send loadLidComplete(2);
			System.out.println("\u001B[31m" + "[DEBUG] no bottle at pos 3  (lid loader)" + "\u001B[0m");
		}
	}
}