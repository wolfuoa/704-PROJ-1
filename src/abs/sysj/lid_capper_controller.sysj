LidCapperController(
	input signal bottleAtPos4, gripperCylinderRotationAtMax, gripperCylinderRotationAtOrigin, gripperCylinderLifted, gripperCylinderLowered, enableLidCapper;
	output signal gripperCylinderExtend, gripperCylinderRotate, gripperCylinderCounterRotate, gripperCapClampOn, gripperBottleClampOn;
	input Integer channel capBottle;
	output Integer channel capBottleComplete, capBottleCompleteSensors;
   	)
->
{
	while(true)
	{
		pause;
		receive capBottle;
		present(bottleAtPos4)
		{
			
			await(enableLidCapper);
			abort(gripperCylinderLowered)
			{
				{sustain gripperBottleClampOn;}
				||
				{sustain gripperCylinderExtend;}
			}
			System.out.println("[DEBUG] gripper cylinder lowered");
			await(!enableLidCapper);
			
			await(enableLidCapper);
			abort(gripperCylinderRotationAtMax)
			{
				{sustain gripperBottleClampOn;}
				||
				{sustain gripperCylinderExtend;}
				||
				{sustain gripperCapClampOn;}
				||
				{sustain gripperCylinderRotate;}
			}
			System.out.println("[DEBUG] gripper cylinder rotation at max");
			await(!enableLidCapper);
			
			await(enableLidCapper);
			abort(gripperCylinderLifted)
			{
				sustain gripperBottleClampOn;
			}
			System.out.println("[DEBUG] gripper cylinder lifted");
			await(!enableLidCapper);
			
			await(enableLidCapper);
			abort(gripperCylinderRotationAtOrigin)
			{
				sustain gripperCylinderCounterRotate;
			}
			System.out.println("[DEBUG] gripper cylinder rotation at origin");
			await(!enableLidCapper);
			
			send capBottleComplete(0);
			send capBottleCompleteSensors(0);
		}
		else
		{
			// bottle at pos 4 not detected
			send capBottleComplete(2);
			System.out.println("\u001B[31m" + "[DEBUG] no bottle at pos 4 (lid capper)" + "\u001B[0m");
		}

	}
}