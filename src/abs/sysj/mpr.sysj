import run.GUI;
import run.POSGUI;
import run.DT;
import util.Order;
import util.Bottle;


MPR(
	input signal enableMPR;
	input Order signal posOrder;
	input Integer channel conveyorStepComplete, capBottleComplete, loadLidCompleteFaultTolerant, rotateStepCompleteFaultTolerant, fillBottleComplete, placeBottleComplete, removeBottleComplete;
	output Integer channel conveyorStep, capBottle, loadLidFaultTolerant, rotateStepFaultTolerant, placeBottle, removeBottle;
	output Order channel fillBottle;
   	)
->
{
	new Thread(new GUI()).start();
	new Thread(new POSGUI()).start();
	new Thread(new DT()).start();

	String signal RESET; 
	String signal BLACK; 
	String signal RED; 
	String signal GREEN; 
	String signal YELLOW; 
	String signal BLUE; 
	String signal PURPLE; 
	String signal CYAN; 
	String signal WHITE;

	emit RESET("\u001B[0m");
	emit BLACK("\u001B[30m");
	emit RED("\u001B[31m");
	emit GREEN("\u001B[32m");
	emit YELLOW("\u001B[33m");
	emit BLUE("\u001B[34m");
	emit PURPLE("\u001B[35m");
	emit CYAN("\u001B[36m");
	emit WHITE("\u001B[37m");

	int ITERATION_OFFSET_CONSTANT = 5;

	//temp override for bottles in order
	int bottleNums = 5;

	// array of Bottle objects, called bottles
	Bottle[] bottles = new Bottle[bottleNums];
	System.out.println("created bottles array");

	while(true)
	{

		// once all bottles have been processed, do not keep making bottles
		//if(iteration == bottleNums) {bottleNums = 0;}
		//bottles.clear();



		// posOrder retrival
		await(posOrder);
        Order recievedOrder = (Order)#posOrder;
        System.out.println((String)#PURPLE + "Recieved pos Order Object" + (String)#RESET);
        System.out.println((String)#PURPLE + "Quantity is " + recievedOrder.getQuantity() + (String)#RESET);
		bottleNums = recievedOrder.getQuantity();

		// Takes Six iterations for the first bottle to complete
		// Beyond this point each additional signal will produce a bottle
		// Hence, for a batch size of 3 bottles, it takes 8 iterations
		// So, we need to add 5 to the total system iterations
		// We also need to prevent more bottles from being loaded onto the conveyor.
		// Therefore, we will encase the place bottle logic in "if(iteration < bottleNums)"

		for(int iteration = 0; iteration < bottleNums + ITERATION_OFFSET_CONSTANT; iteration++) 
		{
			System.out.println((String)#BLUE + "Starting iteration " + iteration + (String)#RESET);
			bottles[iteration] = new Bottle(iteration, "START OF LOG");

			await(enableMPR);
			send placeBottle(0);
			receive placeBottleComplete;
			System.out.println("Place Bottle Complete");
			await(!enableMPR);

			await(enableMPR);
			send removeBottle(0);
			receive removeBottleComplete;
			System.out.println("Remove Bottle Complete");
			await(!enableMPR);
			
			await(enableMPR);
			System.out.println((String)#YELLOW + "Conveyor Start" + (String)#RESET);
			send conveyorStep(0);
			receive conveyorStepComplete;
			System.out.println((String)#GREEN + "Conveyor Complete" + (String)#RESET);
			await(!enableMPR);

			await(enableMPR);
			System.out.println((String)#YELLOW + "Rotary Turntable Start" + (String)#RESET);
			send rotateStepFaultTolerant(0);
			receive rotateStepCompleteFaultTolerant;
			System.out.println((String)#GREEN + "Rotary Turntable Complete" + (String)#RESET);
			await(!enableMPR);

			bottles[iteration].addInfo("test123");
			
			await(enableMPR);
			{
				// Order test = new Order(4,80,40,30,50);
				// bottles[iteration].addInfo("New order received");
				System.out.println((String)#YELLOW + "Fill Bottle Start" + (String)#RESET);
				send fillBottle((Order)#posOrder);
				receive fillBottleComplete;
				//bottles[iteration].addInfo("Bottle filled");
				System.out.println((String)#GREEN + "Fill Bottle Complete" + (String)#RESET);
			}
			||
			{
				System.out.println((String)#YELLOW + "Load Lid Start" + (String)#RESET);
				send loadLidFaultTolerant(0);
				receive loadLidCompleteFaultTolerant;
				System.out.println((String)#GREEN + "Load Lid Complete" + (String)#RESET);
			}
			||
			{
				System.out.println((String)#YELLOW + "Cap Bottle Start" + (String)#RESET);
				send capBottle(0);
				receive capBottleComplete;
				System.out.println((String)#GREEN + "Cap Bottle Complete" + (String)#RESET);
			}
			await(!enableMPR);	

			pause;
		}

		//print out logs after processing all bottles
		for (int i = 0; i < bottleNums; i++) {
			System.out.println("===== Printing out bottle number: " + i + "=====");
			bottles[i].testPrint();
			halt;
		}

		pause;
	}
}